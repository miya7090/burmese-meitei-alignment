# alternative to procrustes
# still experimenting with this

import numpy as np
import tensorflow as tf
import math
import pickle
import random
from sklearn.decomposition import PCA
'''
X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])

Y = pca.fit_transform(X)
#PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,
#  svd_solver='auto', tol=0.0, whiten=False)
print(pca.explained_variance_ratio_) 
print(X)
print(Y)
'''
firstDict = pickle.load(open("segMeiEmbedDict.p","rb"))
firstRevDict = pickle.load(open("segMeiembedRevDict.p","rb"))
firstMatrix = pickle.load(open("segMeiEmbed.p","rb"))
secondDict = pickle.load(open("segBBembedDict.p","rb"))
secondRevDict = pickle.load(open("segBBembedRevDict.p","rb"))
secondMatrix = pickle.load(open("segBBEmbed.p","rb"))
#firstMatrix = np.random.uniform(1.000, 1.001, size=(6000,128))
FL = "deleteTest.txt" # distances

### PCA ###
pca = PCA(n_components=6)
mtx1 = pca.fit_transform(firstMatrix)
mtx2 = pca.fit_transform(secondMatrix)

##################neighbors
from sklearn.neighbors import NearestNeighbors

j = 0
for LLL in range(30):
  if LLL < 6:
    j = LLL
  elif LLL < 18:
    j=random.randint(5, 100)
  else:
    j=random.randint(100, 500)
    
  with open(FL, "a") as myfile:
    myfile.write("\n")
  with open(FL, "ab") as myfile:
    myfile.write(firstRevDict[j].encode("utf-8"))
  with open(FL, "a") as myfile:
    myfile.write(",")
    
  neigh = NearestNeighbors(4)             # find the k nearest words
  neigh.fit(mtx2)                                     ##
  dist, ind = neigh.kneighbors([mtx1[j]]) # find neighbors

  for i, index in enumerate(ind[0]):
    with open(FL, "ab") as myfile:
      myfile.write(secondRevDict[index].encode("utf-8"))    ## may or may not need .encode("utf-8")
    with open(FL, "a") as myfile:
      myfile.write(",")
      
